<#assign package="${interfaceClass.package.name}.impl"?replace("interfacecsi", "ws")>
<#assign packageInterface="${interfaceClass.package.name}"?replace("interfacecsi", "ws")>
<#assign interface="${interfaceClass.simpleName}Ws"?replace("Interface", "")>
<#assign className="${interface}Impl">
<#assign beanName="${className}"?uncap_first>

package ${package};
import javax.jws.WebService;

import org.slf4j.Logger;
import org.slf4j.LoggerFactory;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.stereotype.Component;

import it.csi.stacore.staon.exception.BusinessException;
import ${interfaceClass.name};
import ${packageInterface}.${interface};
import it.csi.stacore.staon.util.Tracer;
import it.csi.stacore.staon.etc.Constants;

/**
 *  @generated
 package=  ${package}
 beanName= ${beanName}
 className= ${className}
 interface= ${interface}
*/
@WebService(endpointInterface = "${packageInterface}.${interface}")
@Component("${beanName}")
public class ${className} implements ${interface} {

	protected final static Logger LOG = LoggerFactory.getLogger(Constants.APPLICATION_NAME);
	
	@Autowired
	private ${interfaceClass.name} ${beanName};

    <#list interfaceClass.methods as currentMethod>
	/**
	 * @generated
	 */
	public ${currentMethod.returnType.canonicalName} ${currentMethod.name} (
		<#list currentMethod.parameterTypes as currentParam>
			${currentParam.canonicalName} par${currentParam_index + 1} <#if currentParam_has_next>,<#else>)</#if>
    	</#list>
    	)
      <#list currentMethod.exceptionTypes as currentException>
          <#if (currentException_index == 0)> throws </#if>
            ${currentException.canonicalName} <#if currentException_has_next>,</#if>
      </#list>
    	{
    	final String method = "${currentMethod.name}";
    	try{
        	<#if currentMethod.returnType.name!='void'>return</#if> ${beanName}.${currentMethod.name}(<#list currentMethod.parameterTypes as currentParam>par${currentParam_index + 1} <#if currentParam_has_next>,</#if></#list>);
		}
		catch(BusinessException e) {
			Tracer.error(LOG,  getClass().getName(), method, "BusinessException " + e);
			throw new Exception(e.getMessage());
		}
		catch(Exception e) {
			Tracer.error(LOG,  getClass().getName(), method, "Exception " + e);
			throw new Exception(e.getMessage());
		}
		finally{

		}
	}
  </#list>

}
